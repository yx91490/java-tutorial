(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{571:function(t,s,a){"use strict";a.r(s);var e=a(27),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"问题和练习的答案：并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题和练习的答案：并发"}},[t._v("#")]),t._v(" 问题和练习的答案：并发")]),t._v(" "),a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("你可以传递一个 Thread 对象 Executor.execute 吗？这样的调用是否有意义？")]),t._v(" "),a("p",[a("code",[t._v("Thread")]),t._v(" 实现了 Runnable 接口，这样你就可以通过 Executor.execute 执行 "),a("code",[t._v("Thread")]),t._v(" 实例。\n但是，以 "),a("code",[t._v("Thread")]),t._v(" 这种方式使用对象是没有意义的。如果对象直接实例化 "),a("code",[t._v("Thread")]),t._v("，其 run 方法不执行任何操作。\n您可以继承 "),a("code",[t._v("Thread")]),t._v(" 并重写 "),a("code",[t._v("run")]),t._v(" 方法定义一个子类，但是这样一个类将实现执行器不会使用的功能。")])])]),t._v(" "),a("h2",{attrs:{id:"练习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("以下代码怎么修改才能让主线程中的 message 始终都赋值成功,且打印出来？是否可以调整两个 "),a("code",[t._v("sleep")]),t._v(" 的参数？如何保证始终都有效？")]),t._v(" "),a("p",[t._v('解决方案：\n程序几乎总是打印："Mares do eat oats." 但是这个结果并不能保证，因为 两个修改语句之间没有发生关系。有两种方法可以保证：')]),t._v(" "),a("ol",[a("li",[t._v("在主线程中，保留对 CorrectorThread 实例的引用。然后 join")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CorrectorThread")]),t._v(" correctorThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CorrectorThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    correctorThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    correctorThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mares do not eat oats."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("封装 message 在具有同步方法的对象中。message 除了通过这些方法外，不要参考。")])]),t._v(" "),a("p",[t._v("这两种技术都建立了 "),a("code",[t._v("happens-before")]),t._v(" 的关系，使得 message 可见的变化。")]),t._v(" "),a("p",[t._v("第三种技术是简单地声明 message 为 volatile。它们可能会顺序发生，但是由于调度的不确定性和未知的粒度 sleep，这是不能保证的。")]),t._v(" "),a("p",[t._v("改变两个 sleep 调用的参数也没有帮助，因为这并不能保证在关系之前发生。")])]),t._v(" "),a("li",[a("p",[t._v("修改 "),a("RouterLink",{attrs:{to:"/essential/concurrency/guardmeth.html"}},[t._v("守护块")]),t._v(" 中的生产者 - 消费者示例，以使用标准库类而不是 "),a("code",[t._v("Drop")]),t._v(" 类")],1)])]),t._v(" "),a("p",[t._v("解决方案：\n"),a("code",[t._v("java.util.concurrent.BlockingQueue")]),t._v(" 接口定义了 get 阻塞队列为空，以及阻止队列已满的 put 方法。\n这些是有效的定义的操作 "),a("code",[t._v("Drop")]),t._v(" 除了 "),a("code",[t._v("Drop")]),t._v(" 不是队列！ 所以在前面的例子中，直接把 Drop 换成 "),a("code",[t._v("BlockingQueue")]),t._v(" 即可")]),t._v(" "),a("p",[a("code",[t._v("BlockingQueue")]),t._v(" 几乎是 Drop 一个替代品。在主要的问题是 "),a("code",[t._v("Producer")]),t._v("，随着 BlockingQueue 中，put 和 get 方法抛出 "),a("code",[t._v("InterruptedException")]),t._v("。\n这意味着现有的 "),a("code",[t._v("try")]),t._v(" 必须向上移动一个级别：")])])}),[],!1,null,null,null);s.default=n.exports}}]);