(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{489:function(t,e,a){"use strict";a.r(e);var v=a(27),s=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"接口总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口总结"}},[t._v("#")]),t._v(" 接口总结")]),t._v(" "),a("p",[t._v("核心集合接口是 Java 集合框架的基础")]),t._v(" "),a("p",[t._v("Java 集合框架层次结构包含两个不同的接口树：")]),t._v(" "),a("p",[a("strong",[t._v("第一个 ：")]),t._v(" Collection，它提供了所有集合使用的基本功能，例如：add 和 remove。其子接口 Set，List 和 Queue 提供专门的集合")]),t._v(" "),a("ul",[a("li",[t._v("set 接口不允许重复元素。这可用于存储集合，例如卡片或学生记录，Set 接口有一个子接口 SortedSet，它提供了集合中的元素排序。")]),t._v(" "),a("li",[t._v("List 接口提供有序集合，用于需要精确控制每个元素插入位置的情况。你可以从一个 List 精确的位置检索元素")]),t._v(" "),a("li",[t._v("Queue 接口实现了额外的插入，抽取和检查操作。Queue 中的元素通常基于 FIFO 排序")]),t._v(" "),a("li",[t._v("Deque 接口可以在两端插入，删除，和检查操作。可以在 LIFO 和 FIFO 的场景使用")])]),t._v(" "),a("p",[a("strong",[t._v("第二个 ：")]),t._v(" Map，键值对映射，类似于 Hashtable。其子接口 SortedMap 按升序或按指定的 Comparator 顺序维护其键值对。")]),t._v(" "),a("p",[t._v("这些接口运行独立于其表示的细节来操纵集合。")])])}),[],!1,null,null,null);e.default=s.exports}}]);