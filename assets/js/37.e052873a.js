(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{453:function(v,_,t){"use strict";t.r(_);var e=t(27),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"集合框架概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合框架概述"}},[v._v("#")]),v._v(" 集合框架概述")]),v._v(" "),t("p",[v._v("集合框架将介绍以下几个点。让你了解什么是集合，以及如何使用。您将了解构成 Java 集合框架的核心元素 - 接口、实现、聚合操作和算法")]),v._v(" "),t("ul",[t("li",[t("p",[t("RouterLink",{attrs:{to:"/collections/intro.html"}},[v._v("简介")]),v._v(" 他们会如何让你的工作更轻松，你的程序更好。您将了解构成的集合框架的核心要素：接口、实现和算法。")],1)]),v._v(" "),t("li",[t("p",[t("RouterLink",{attrs:{to:"/collections/interfaces/"}},[v._v("接口")]),v._v(" 描述了核心集合接口，这是 Java Collections Framework 的心脏和灵魂。\n您将学习有效使用这些接口的一般准则，包括何时使用哪个接口。您还将学习每个接口的示例语法，这将帮助您充分利用接口。")],1)]),v._v(" "),t("li",[t("p",[t("RouterLink",{attrs:{to:"/collections/streams/"}},[v._v("聚合操作")]),v._v(" 如何编写高效优雅的迭代操作代码- 大部分讲的 JDK8+ 的流操作。")],1)]),v._v(" "),t("li",[t("p",[t("RouterLink",{attrs:{to:"/collections/implementations/"}},[v._v("实现")]),v._v(" 描述 JDK 的通用集合的实现 ，并告诉您何时使用哪种实现。您还可以了解包装的实现，这在通用实现添加功能。")],1)]),v._v(" "),t("li",[t("p",[t("RouterLink",{attrs:{to:"/collections/algorithms.html"}},[v._v("算法")]),v._v(" 描述的多态算法由 JDK 提供的集合操作。运气好的话，你永远不会再写自己的排序程序了！")],1)]),v._v(" "),t("li",[t("p",[t("RouterLink",{attrs:{to:"/collections/custom-implementations.html"}},[v._v("自定义实现")]),v._v(" 告诉你为什么，你可能要编写自己的集合实现（而不是使用由 JDK 提供的通用实现之一），以及你如何去了解它。这很容易与 JDK 的抽象集合的实现！")],1)]),v._v(" "),t("li",[t("p",[t("RouterLink",{attrs:{to:"/collections/interoperability.html"}},[v._v("互操作性")]),v._v(" 告诉你怎么兼容老旧的 API 集合，此外，它还告诉您如何设计新的 API，以便与其他新 API 无缝互操作。")],1)])]),v._v(" "),t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[v._v("一个集合代表一组对象，集合框架是用于表示和操纵集合的统一架构，使得集合能够独立于实现细节被操作。")]),v._v(" "),t("p",[v._v("集合框架包括：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("集合接口")]),v._v(" "),t("p",[v._v("表示不同类型的集合，例如 sets、lists and maps。这些接口构成了框架的基础。")])]),v._v(" "),t("li",[t("p",[v._v("通用实现")]),v._v(" "),t("p",[v._v("集合接口的主要实现。")])]),v._v(" "),t("li",[t("p",[v._v("传统实现")]),v._v(" "),t("p",[v._v("来自早期版本的集合类，Vector 和 Hashtable，被改造以实现集合接口。")])]),v._v(" "),t("li",[t("p",[v._v("专用实现")]),v._v(" "),t("p",[v._v("实施设计用于特殊情况。这些实现显示非标准性能特性，使用限制或行为。")])]),v._v(" "),t("li",[t("p",[v._v("并发实现")]),v._v(" "),t("p",[v._v("实现设计用于高并发使用。")])]),v._v(" "),t("li",[t("p",[v._v("包装器实现")]),v._v(" "),t("p",[v._v("向其他实现添加功能（如同步）。")])]),v._v(" "),t("li",[t("p",[v._v("方便实现")]),v._v(" "),t("p",[v._v("集合接口的高性能“小型实现”。")])]),v._v(" "),t("li",[t("p",[v._v("抽象实现")]),v._v(" "),t("p",[v._v("部分实现集合接口以方便定制实现。")])]),v._v(" "),t("li",[t("p",[v._v("算法")]),v._v(" "),t("p",[v._v("对集合执行有用函数的静态方法，例如排序列表。")])]),v._v(" "),t("li",[t("p",[v._v("基础设施")]),v._v(" "),t("p",[v._v("为集合接口提供必要支持的接口。")])]),v._v(" "),t("li",[t("p",[v._v("数组实用程序")]),v._v(" "),t("p",[v._v("基本类型和引用对象数组的效用函数。严格来说，不是集合框架的一部分，这个特性在集成框架的同时被添加到 Java 平台，并依赖于一些相同的基础设施。")])])]),v._v(" "),t("h2",{attrs:{id:"集合接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合接口"}},[v._v("#")]),v._v(" 集合接口")]),v._v(" "),t("p",[v._v("集合接口被分成两组。最基本的接口 java.util.Collection 具有以下后代：")]),v._v(" "),t("ul",[t("li",[v._v("java.util.Set")]),v._v(" "),t("li",[v._v("java.util.SortedSet")]),v._v(" "),t("li",[v._v("java.util.NavigableSet")]),v._v(" "),t("li",[v._v("java.util.Queue")]),v._v(" "),t("li",[v._v("java.util.concurrent.BlockingQueue")]),v._v(" "),t("li",[v._v("java.util.concurrent.TransferQueue")]),v._v(" "),t("li",[v._v("java.util.Deque")]),v._v(" "),t("li",[v._v("java.util.concurrent.BlockingDeque")])]),v._v(" "),t("p",[v._v("其他集合接口基于 java.util.Map，而不是真正的集合。但是，这些接口包含收集视图操作，这使得它们可以作为集合操作。map 有以下子代：")]),v._v(" "),t("ul",[t("li",[v._v("java.util.SortedMap")]),v._v(" "),t("li",[v._v("java.util.NavigableMap")]),v._v(" "),t("li",[v._v("java.util.concurrent.ConcurrentMap")]),v._v(" "),t("li",[v._v("java.util.concurrent.ConcurrentNavigableMap")])]),v._v(" "),t("p",[v._v("集合集合接口中的许多修改方法都是可选的。实现的时候可选支持一个或多个，不支持的方法在尝试执行时抛出运行时异常（UnsupportedOperationException）。")]),v._v(" "),t("p",[v._v("有以下几个术语：")]),v._v(" "),t("ul",[t("li",[v._v("不支持修改的操作（如 add、remove、clear）")]),v._v(" "),t("li",[v._v("不可变集合")]),v._v(" "),t("li",[v._v("集合的大小不可变")]),v._v(" "),t("li",[v._v("支持随机访问列表，不支持的称为顺序访问列表，通过 RandomAccess 接口标记，使得通用算法可以改变其行为")])]),v._v(" "),t("p",[v._v("还有一些限制可以存储什么元素，如 map 的 key 和 value 可能要求：")]),v._v(" "),t("ul",[t("li",[v._v("是一种特殊的类型")]),v._v(" "),t("li",[v._v("不是 null")])]),v._v(" "),t("p",[v._v("试图添加违反实现的限制的元素会导致运行时异常，通常是 ClassCastException、IllegalArgumentException 或 NullPointerException。\n尝试删除或测试是否存在违反实现的限制的元素可能会导致异常。一些受限制的集合允许这种使用。")]),v._v(" "),t("h2",{attrs:{id:"集合实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合实现"}},[v._v("#")]),v._v(" 集合实现")]),v._v(" "),t("p",[v._v("实现集合接口的类通常具有 "),t("code",[v._v("< Implementation-style > < Interface >")]),v._v(" 形式的名称。下表总结了通用实现：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("接口")]),v._v(" "),t("th",[v._v("哈希表")]),v._v(" "),t("th",[v._v("可变数组")]),v._v(" "),t("th",[v._v("平衡二叉树")]),v._v(" "),t("th",[v._v("链表")]),v._v(" "),t("th",[v._v("哈希表+链表")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Set")]),v._v(" "),t("td",[v._v("HashSet")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("TreeSet")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("LinkedHashSet")])]),v._v(" "),t("tr",[t("td",[v._v("List")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("ArrayList")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("LinkedList")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("Deque")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("ArrayDeque")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("LinkedList")]),v._v(" "),t("td",[v._v("-")])]),v._v(" "),t("tr",[t("td",[v._v("Map")]),v._v(" "),t("td",[v._v("HashMap")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("TreeMap")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("LinkedHashMap")])])])]),v._v(" "),t("h2",{attrs:{id:"并发集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发集合"}},[v._v("#")]),v._v(" 并发集合")]),v._v(" "),t("p",[v._v("多个线程使用的集合，称为并发编程。")]),v._v(" "),t("p",[v._v("接口：")]),v._v(" "),t("ul",[t("li",[v._v("BlockingQueue")]),v._v(" "),t("li",[v._v("TransferQueue")]),v._v(" "),t("li",[v._v("BlockingDeque")]),v._v(" "),t("li",[v._v("ConcurrentMap")]),v._v(" "),t("li",[v._v("ConcurrentNavigableMap")])]),v._v(" "),t("p",[v._v("实现类：")]),v._v(" "),t("ul",[t("li",[v._v("LinkedBlockingQueue")]),v._v(" "),t("li",[v._v("ArrayBlockingQueue")]),v._v(" "),t("li",[v._v("PriorityBlockingQueue")]),v._v(" "),t("li",[v._v("DelayQueue")]),v._v(" "),t("li",[v._v("SynchronousQueue")]),v._v(" "),t("li",[v._v("LinkedBlockingDeque")]),v._v(" "),t("li",[v._v("LinkedTransferQueue")]),v._v(" "),t("li",[v._v("CopyOnWriteArrayList")]),v._v(" "),t("li",[v._v("CopyOnWriteArraySet")]),v._v(" "),t("li",[v._v("ConcurrentSkipListSet")]),v._v(" "),t("li",[v._v("ConcurrentHashMap")]),v._v(" "),t("li",[v._v("ConcurrentSkipListMap")])]),v._v(" "),t("p",[v._v("原文 https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html")])])}),[],!1,null,null,null);_.default=i.exports}}]);