(window.webpackJsonp=window.webpackJsonp||[]).push([[349],{435:function(a,e,o){"use strict";o.r(e);var t=o(27),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,o=a._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[o("h1",{attrs:{id:"默认-cookiemanager"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#默认-cookiemanager"}},[a._v("#")]),a._v(" 默认 CookieManager")]),a._v(" "),o("p",[a._v("cookiemanager 提供了一个 CookieHandler 的具体实现，对于大多数用户来说，它足以处理 HTTP 状态管理。\nCookieManager 将 cookie 的存储与设置、接受和拒绝它们的策略分开。\nCookieManager 是用 java.net.CookieStore 和 java.net.CookiePolicy 初始化的。\nCookieStore 管理 cookie 的存储。CookiePolicy 对 cookie 的接受和拒绝做出决策")]),a._v(" "),o("p",[a._v("下面的代码展示了如何创建和设置一个系统范围的 CookieManager:")]),a._v(" "),o("div",{staticClass:"language-java line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-java"}},[o("code",[a._v("java"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("net"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),o("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CookieManager")]),a._v(" cm "),o("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" java"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("net"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),o("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CookieManager")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\njava"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("net"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),o("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CookieHandler")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[a._v("setDefault")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("cm"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[a._v("1")]),o("br"),o("span",{staticClass:"line-number"},[a._v("2")]),o("br")])]),o("p",[a._v("使用默认构造函数构造 CookieManager，将使用默认 cookie 存储和接受策略创建新实例。\nCookieStore 是存储任何已接受的 HTTP cookie 的地方。如果在创建时未指定，则 CookieManager 实例将使用内存实现（InMemoryCookieStore）。\n此实现不是持久性的，仅在 Java 虚拟机的生命周期内存在。需要持久存储的用户必须实现自己的存储。")]),a._v(" "),o("p",[a._v("CookieManageris 使用的默认 cookie 策略 CookiePolicy.ACCEPT_ORIGINAL_SERVER，仅接受来自原始服务器的 cookie。\n因此，Set-Cookie 服务器的响应必须设置“域”属性，并且必须与 URL 中的主机域匹配。有关更多信息，\n请参阅 "),o("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/api/java/net/HttpCookie.html#domainMatches-java.lang.String-java.lang.String-",target:"_blank",rel:"noopener noreferrer"}},[a._v("java.net.HttpCookie.domainMatches"),o("OutboundLink")],1),a._v("。\n需要不同策略的用户必须实现 CookiePolicy 接口并将其传递给 CookieManager 构造函数，\n或者 CookieManager 使用 setCookiePolicy(cookiePolicy) 方法将其设置为已构造的实例。")]),a._v(" "),o("p",[a._v("从 cookie 存储区检索 cookie 时，CookieManager 还要执行 "),o("a",{attrs:{href:"https://www.ietf.org/rfc/rfc2965.txt",target:"_blank",rel:"noopener noreferrer"}},[a._v("RFC 2965 第 3.3.4 节中的 path 匹配规则"),o("OutboundLink")],1),a._v(" 。\n因此，cookie 还必须设置其 “path” 属性，以便在从 cookie 存储中检索 cookie 之前应用路径匹配规则。")]),a._v(" "),o("p",[a._v("总之，CookieManager 提供了处理 cookie 的框架，并为 CookieStore 提供了一个很好的默认实现。\nCookieManager 是高度可定制的，它允许您设置自己的 CookieStore、CookiePolicy 或两者兼备。")]),a._v(" "),o("p",[a._v("简单说：CookieManager 根据规范提供了操作 cookie 的方法，并且允许定制 cookie 的存储和策略")])])}),[],!1,null,null,null);e.default=n.exports}}]);