(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{771:function(t,a,v){"use strict";v.r(a);var e=v(27),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"面向对象编程概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象编程概念"}},[t._v("#")]),t._v(" 面向对象编程概念")]),t._v(" "),v("p",[t._v("如果您以前从未使用面向对象的编程语言，则需要先学习一些基本概念，然后才能开始编写任何代码。本课将向您介绍对象，类，继承，接口和包。每个讨论集中在这些概念如何与现实世界的关联，同时提供对 Java 编程语言语法的介绍。")]),t._v(" "),v("ul",[v("li",[v("p",[v("RouterLink",{attrs:{to:"/java/concepts/obgect.html"}},[t._v("什么是对象？")])],1),t._v(" "),v("p",[t._v("对象是相关状态和行为的软件包。软件对象通常用于对在日常生活中发现的真实世界对象进行建模。本课讲解了一个对象中的状态和行为是如何表现的，介绍了数据封装的概念，并以这种方式解释了设计软件的好处。")])]),t._v(" "),v("li",[v("p",[v("RouterLink",{attrs:{to:"/java/concepts/class.html"}},[t._v("什么是类？")])],1),t._v(" "),v("p",[t._v("类是创建对象的蓝图或原型。本节定义了一个类，用于对现实世界对象的状态和行为进行建模。它有意地集中在基础上，显示一个简单的类甚至可以干净地模拟状态和行为。")])]),t._v(" "),v("li",[v("p",[v("RouterLink",{attrs:{to:"/java/concepts/inheritance.html"}},[t._v("什么是继承？")])],1),t._v(" "),v("p",[t._v("继承为组织和构建软件提供了强大而自然的机制。本节介绍了类如何从其超类继承状态和行为，并解释了如何使用Java编程语言提供的简单语法从一个类派生另一个类。")])]),t._v(" "),v("li",[v("p",[v("RouterLink",{attrs:{to:"/java/concepts/interface.html"}},[t._v("什么是接口？")])],1),t._v(" "),v("p",[t._v("接口是一个类和外部世界之间的合同。当一个类实现一个接口时，它承诺提供该接口发布的行为。本节定义了一个简单的接口，并解释了实现它的任何类的必要更改。")])]),t._v(" "),v("li",[v("p",[v("RouterLink",{attrs:{to:"/java/concepts/package.html"}},[t._v("什么是包？")])],1),t._v(" "),v("p",[t._v("包是用于以逻辑方式组织类和接口的命名空间。将代码放入软件包可使大型软件项目更易于管理。本节介绍了为什么这是有用的，并将介绍给 Java 平台提供的应用程序编程接口（API）。")])]),t._v(" "),v("li",[v("p",[v("RouterLink",{attrs:{to:"/java/concepts/qande.html"}},[t._v("问题与练习：面向对象编程概念")])],1),t._v(" "),v("p",[t._v("使用本节中提出的问题和练习来测试对对象，类，继承，接口和包的理解。")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);