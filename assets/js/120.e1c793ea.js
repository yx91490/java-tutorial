(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{577:function(t,e,n){"use strict";n.r(e);var r=n(27),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"执行器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行器"}},[t._v("#")]),t._v(" 执行器")]),t._v(" "),n("p",[t._v("在前面的列子中，由 Thread 对象和 Runnable 对象相关联定义的线程。这适用于小型应用程序，\n但在大规模应用程序中，将线程管理和创建与其他应用程序分开是有意义的。封装这些函数的对象称为执行器。以下小节详细描述了执行器。")]),t._v(" "),n("ul",[n("li",[t._v("执行器接口 - 定义三个执行器对象类型。")]),t._v(" "),n("li",[t._v("线程池 - 是最常见的执行器实现方式。")]),t._v(" "),n("li",[t._v("Fork / Join -是一个用于利用多个处理器的框架（JDK 7 中的新功能）。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);