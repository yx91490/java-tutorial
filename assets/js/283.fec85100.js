(window.webpackJsonp=window.webpackJsonp||[]).push([[283],{614:function(s,t,a){"use strict";a.r(t);var n=a(27),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"object-作为超类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-作为超类"}},[s._v("#")]),s._v(" Object 作为超类")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#clone-方法"}},[s._v("clone() 方法")])]),a("li",[a("a",{attrs:{href:"#equals-方法"}},[s._v("equals 方法")])]),a("li",[a("a",{attrs:{href:"#finalize-方法"}},[s._v("finalize 方法")])]),a("li",[a("a",{attrs:{href:"#getclass-方法"}},[s._v("getClass 方法")])]),a("li",[a("a",{attrs:{href:"#hashcode-方法"}},[s._v("hashCode 方法")])]),a("li",[a("a",{attrs:{href:"#tostring-方法"}},[s._v("toString 方法")])])])]),a("p"),s._v(" "),a("p",[s._v("Object 在 java.lang 包，坐镇类层次结构树的顶端。每个阶级都是 Object 阶级的直接或间接的后裔 。您使用或编写的每个类都继承了 Object 实例方法。您不需要使用这些方法中的任何一种，但是，如果您选择这样做，则可能需要使用特定于您的类的代码来覆盖它们。本节讨论 Object 的方法是：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("protected Object clone() throws CloneNotSupportedException")])]),s._v(" "),a("p",[s._v("传进并返回此对象的副本")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("public boolean equals(Object obj)")])]),s._v(" "),a("p",[s._v("其他某个对象是否「等于」这一个")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("protected void finalize() throws Throwable")])]),s._v(" "),a("p",[s._v("当垃圾收集确定没有更多的对象引用时，垃圾回收器调用该方法")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("public final Class getClass()")])]),s._v(" "),a("p",[s._v("返回对象的运行时类")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("public int hashCode()")])]),s._v(" "),a("p",[s._v("返回该对象的哈希码值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("public String toString()")])]),s._v(" "),a("p",[s._v("返回对象的字符串表示形式。")])])]),s._v(" "),a("p",[s._v("notify、notifyAll 和 wait方法，它在后面的课程中讨论，并不会在这里介绍的同步独立运行的线程的活动中发挥作用。有五种方法：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("public final void notify()")])]),s._v(" "),a("li",[a("code",[s._v("public final void notifyAll()")])]),s._v(" "),a("li",[a("code",[s._v("public final void wait()")])]),s._v(" "),a("li",[a("code",[s._v("public final void wait(long timeout)")])]),s._v(" "),a("li",[a("code",[s._v("public final void wait(long timeout, int nanos)")])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("这些方法中有一些细微的方面，尤其是 clone 方法。")])]),s._v(" "),a("h2",{attrs:{id:"clone-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clone-方法"}},[s._v("#")]),s._v(" "),a("code",[s._v("clone()")]),s._v(" 方法")]),s._v(" "),a("p",[s._v("如果某个类或其某个超类实现了该 Cloneable 接口，则可以使用该 "),a("code",[s._v("clone()")]),s._v(" 方法从现有对象创建一个副本。要创建一个克隆，你写：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("aCloneableObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("Object 这个方法的实现将检查 "),a("code",[s._v("clone()")]),s._v(" 被调用的对象是否实现了 Cloneable 接口。如果该对象没有，该方法抛出一个 CloneNotSupportedException 异常。异常处理将在后面的课程中介绍。目前，您需要知道 "),a("code",[s._v("clone()")]),s._v(" 必须声明为")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CloneNotSupportedException")]),s._v("\n\nor"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CloneNotSupportedException")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("如果你打算写一个 "),a("code",[s._v("clone()")]),s._v(" 方法来覆盖 Object。")]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("clone()")]),s._v(" 被调用的对象确实实现了 Cloneable 接口，则 Object 的 "),a("code",[s._v("clone()")]),s._v(" 方法的实现将创建与原始对象相同类的对象，并将新对象的成员变量初始化为与原始对象的相应成员变量具有相同的值。")]),s._v(" "),a("p",[s._v("使类可复制的最简单的方法是添加 implements Cloneable 到类的声明中。那么你的对象可以调用 "),a("code",[s._v("clone()")]),s._v(" 方法。")]),s._v(" "),a("p",[s._v("对于一些类，默认行为 Object 的 "),a("code",[s._v("clone()")]),s._v(" 方法工作得很好。但是，如果某个对象包含对外部对象的引用,则可能需要重写 "),a("code",[s._v("clone()")]),s._v(" 才能获得正确的行为。否则，外部引用对象所做的更改也将在克隆中可见。这意味着原始对象和它的克隆不是独立的，要解耦他们，必须重写。连引用的外部对象也需要克隆，以便该对象和它的克隆是真正独立的。")]),s._v(" "),a("h2",{attrs:{id:"equals-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equals-方法"}},[s._v("#")]),s._v(" equals 方法")]),s._v(" "),a("p",[s._v("equals 方法比较两个对象是否相等，如果返回 true 则相等。Object 中提供的 equals 方法使用 「==」 来确定两个对象是否相等，对于原始数据类型，这给出了正确的结果。然而，对于对象来说，事实并非如此。")]),s._v(" "),a("p",[s._v("为了测试两个包含相同信息的对象是否相等。必须重写 equals 方法。这里是一个例子")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Book")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Book")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ISBN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Book")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getISBN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("考虑这个测试 Book 类的两个实例是否相等的代码：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Swing Tutorial, 2nd edition")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Book")]),s._v(" firstBook  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Book")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0201914670"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Book")]),s._v(" secondBook "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Book")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0201914670"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("firstBook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("secondBook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"objects are equal"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"objects are not equal"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("即使 firstBook 和 secondBook 引用不同的对象。它们被认为是相等的，因为比较的对象包含相同的 ISBN 号码。")]),s._v(" "),a("p",[s._v("如果 equals 默认的运算不符合你的类，则应该始始终重写该方法")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("注意：如果您重写 "),a("code",[s._v("equals()")]),s._v("，您也必须重写 "),a("code",[s._v("hashCode()")]),s._v("。")])]),s._v(" "),a("h2",{attrs:{id:"finalize-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finalize-方法"}},[s._v("#")]),s._v(" finalize 方法")]),s._v(" "),a("p",[s._v("Object 类提供的回调方法，当对象变成垃圾时，该方法被回调。Object 的 "),a("code",[s._v("finalize()")]),s._v(" 什么都不做，你可以覆盖 "),a("code",[s._v("finalize()")]),s._v(" 做清理工作，比如释放资源。")]),s._v(" "),a("p",[s._v("该 "),a("code",[s._v("finalize()")]),s._v(" 方法可以被系统自动调用，但是当它被调用时，或者即使被调用，也是不确定的。\n因此，你不应该依靠这种方法来为你做清理工作。例如，如果执行 I / O 之后没有在代码中关闭文件描述符，并且希望 "),a("code",[s._v("finalize()")]),s._v(" 关闭它们，则可能会用完文件描述符。")]),s._v(" "),a("h2",{attrs:{id:"getclass-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getclass-方法"}},[s._v("#")]),s._v(" getClass 方法")]),s._v(" "),a("p",[s._v("你不能覆盖 getClass。")]),s._v(" "),a("p",[s._v("getClass 方法返回一个 Class 对象，该对象具有可用于获取有关该类的信息的方法，例如 "),a("code",[s._v("name（getSimpleName()）")]),s._v("，其 "),a("code",[s._v("superclass（getSuperclass()）")]),s._v("以及它实现的 "),a("code",[s._v("接口（getInterfaces()）")]),s._v("。例如，以下方法获取并显示对象的类名称：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The object\'s"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" class is "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n        obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSimpleName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("java.lang")]),s._v(" 包中的 Class 类有大量的方法（超过 50个）。例如，您可以测试以查看该类是否是注解（"),a("code",[s._v("isAnnotation()")]),s._v("），接口（"),a("code",[s._v("isInterface()")]),s._v("）还是枚举（"),a("code",[s._v("isEnum()")]),s._v("）。你可以看到对象的字段是什么（"),a("code",[s._v("getFields()")]),s._v("）或者它的方法是什么（"),a("code",[s._v("getMethods()")]),s._v("）等等。")]),s._v(" "),a("h2",{attrs:{id:"hashcode-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-方法"}},[s._v("#")]),s._v(" hashCode 方法")]),s._v(" "),a("p",[a("code",[s._v("hashCode()")]),s._v(" 方法返回的值是对象的哈希码，它是以十六进制表示的对象的内存地址。根据定义，如果两个对象相等，则它们的哈希码也 "),a("strong",[s._v("必须相等")]),s._v("。如果你重写了这个 "),a("code",[s._v("equals()")]),s._v(" 方法，你就改变了两个对象的等同方式，而且其 Object 的 "),a("code",[s._v("hashCode()")]),s._v(" 不再有效。因此，如果您重写 "),a("code",[s._v("equals()")]),s._v(" 方法，则还必须重写该 "),a("code",[s._v("hashCode()")]),s._v(" 方法。")]),s._v(" "),a("h2",{attrs:{id:"tostring-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring-方法"}},[s._v("#")]),s._v(" toString 方法")]),s._v(" "),a("p",[s._v("你的类中应该总是考虑重写 "),a("code",[s._v("toString()")]),s._v(" 方法。")]),s._v(" "),a("p",[s._v("所述 Object 的 "),a("code",[s._v("toString()")]),s._v(" 方法返回 String 的对象，这是对于调试非常有用的表示。String 对象的表示完全取决于对象，这就是为什么你需要在你的类中重写 "),a("code",[s._v("toString()")]),s._v("。")]),s._v(" "),a("p",[s._v("您可以使用 "),a("code",[s._v("System.out.println()")]),s._v(" 来显示 "),a("code",[s._v("toString()")]),s._v(" 的内容（对象的文本表示形式），例如：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("firstBook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这对于一个正确的重写 "),a("code",[s._v("toString()")]),s._v("方法来说，可以打印一些有用的东西，比如：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("ISBN："),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0201914670")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Swing")]),s._v("教程"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" 构建GUI的指南，第"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("版\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);