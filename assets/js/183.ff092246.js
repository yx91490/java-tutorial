(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{681:function(v,t,_){"use strict";_.r(t);var n=_(27),o=Object(n.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"文件-i-o（nio-2）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文件-i-o（nio-2）"}},[v._v("#")]),v._v(" 文件 I/O（nio.2）")]),v._v(" "),_("p",[_("strong",[v._v("注意：")]),v._v(" 本教程反映了 JDK 7 发行版中介绍的文件 I / O 机制。Java SE 6 版本的文件 I / O 教程很简短;")]),v._v(" "),_("p",[v._v("该 "),_("code",[v._v("java.nio.file")]),v._v(" 软件包及其相关软件包 "),_("code",[v._v("java.nio.file.attribute")]),v._v(" 为文件 I / O 和访问默认文件系统提供全面的支持。\n虽然 API 有很多类，但您只需要关注几个入口点。你会看到这个 API 非常直观，易于使用。")]),v._v(" "),_("p",[v._v("这个教程首先要问 "),_("strong",[v._v("什么是路径？")]),v._v(" 然后，引入 "),_("strong",[v._v("路径类")]),v._v("，即包的主要入口点。\n说明 Path 与 "),_("strong",[v._v("语法操作")]),v._v(" 相关类中的方法。然后教程将转到包中的其他主类，Files 类包含处理文件操作的方法。\n首先，介绍了 许多 "),_("strong",[v._v("文件操作")]),v._v(" 常见的一些概念。本教程将介绍 "),_("strong",[v._v("检查")]),v._v("、"),_("strong",[v._v("删除")]),v._v(" 和 "),_("strong",[v._v("移动")]),v._v(" 文件的方法。")]),v._v(" "),_("p",[v._v("本教程演示在继续 "),_("strong",[v._v("文件 I / O")]),v._v(" 和 "),_("strong",[v._v("目录 I / O")]),v._v(" 之前。先演示 "),_("strong",[v._v("元数据")]),v._v("。\n"),_("strong",[v._v("随机文件访问")]),v._v("，并检查特定与 "),_("strong",[v._v("符号连接")]),v._v(" 的问题\n最后，如果您在 Java SE 7 发布之前编写了文件 I / O 代码，则会有从旧 API 到新 API 的映射，\n以及有关 "),_("code",[v._v("File.toPath")]),v._v(" 要使用新 API 的开发人员的方法的重要信息 而不重写现有的代码。")])])}),[],!1,null,null,null);t.default=o.exports}}]);