(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{467:function(e,v,_){"use strict";_.r(v);var r=_(27),o=Object(r.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"queue-实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#queue-实现"}},[e._v("#")]),e._v(" queue 实现")]),e._v(" "),_("p",[e._v("分为通用 和 并发实现")]),e._v(" "),_("h2",{attrs:{id:"通用对象实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#通用对象实现"}},[e._v("#")]),e._v(" 通用对象实现")]),e._v(" "),_("p",[e._v("正如上一节中所提到的，"),_("code",[e._v("LinkedList")]),e._v(" 实现了 "),_("code",[e._v("Queue")]),e._v(" 接口，用于提供先入先出（FIFO）队列操作 add，poll 等等。")]),e._v(" "),_("p",[_("code",[e._v("PriorityQueue")]),e._v(" 类是基于所述一个优先级队列的数据结构。此队列根据构建时指定的顺序对元素进行拍戏，\n这可以是元素的自然排序或显示的排序（"),_("code",[e._v("Comparator")]),e._v("）。此队列的头是按指定排序方式确定的最小元素。\n如果多个元素都是最小值，则头是其中一个元素——选择方法是任意的。队列获取操作 "),_("code",[e._v("poll")]),e._v("、"),_("code",[e._v("remove")]),e._v("、"),_("code",[e._v("peek")]),e._v(" 和 "),_("code",[e._v("element")]),e._v(" 访问处于队列头的元素。\n此类及其迭代器实现了 "),_("code",[e._v("Collection")]),e._v(" 和 "),_("code",[e._v("Iterator")]),e._v(" 接口的所有可选 方法。方法 "),_("code",[e._v("iterator()")]),e._v(" 中提供的迭代器不保证以任何特定的顺序遍历优先级队列中的元素。\n如果需要按顺序遍历，请考虑使用  "),_("code",[e._v("Arrays.sort(pq.toArray())")]),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"并发队列实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发队列实现"}},[e._v("#")]),e._v(" 并发队列实现")]),e._v(" "),_("p",[e._v("该 "),_("code",[e._v("java.util.concurrent")]),e._v(" 包包含一组同步的 "),_("code",[e._v("Queue")]),e._v(" 接口和类。 "),_("code",[e._v("BlockingQueue")]),e._v(" 扩展 "),_("code",[e._v("Queue")]),e._v(",\n在检索元素时等待队列变为非空的操作，以及在存储元素时空间在队列中可用的操作。此接口由以下类实现：")]),e._v(" "),_("ul",[_("li",[e._v("LinkedBlockingQueue - 由链表节点支持的可选有界 FIFO 保护队列")]),e._v(" "),_("li",[e._v("ArrayBlockingQueue - 由数组支持的有界 FIFO 阻塞队列")]),e._v(" "),_("li",[e._v("PriorityBlockingQueue - 由堆支持的无界阻塞优先级队列")]),e._v(" "),_("li",[e._v("DelayQueue - 由堆支持的基于时间的调度队列")]),e._v(" "),_("li",[e._v("SynchronousQueue- 使用 BlockingQueue 接口的简单的交会机制")])]),e._v(" "),_("p",[e._v("在 JDK 7 中， TransferQueue 是一个专门的 BlockingQueue 在哪个代码添加一个元素到队列可以选择等待（阻塞）另一个线程中的代码检索元素。\nTransferQueue 有一个单一的实现：")]),e._v(" "),_("ul",[_("li",[e._v("LinkedTransferQueue- TransferQueue 基于链接节点的无界")])])])}),[],!1,null,null,null);v.default=o.exports}}]);