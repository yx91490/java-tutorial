(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{641:function(s,t,a){"use strict";a.r(t);var n=a(27),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#java-中的接口"}},[s._v("Java 中的接口")])]),a("li",[a("a",{attrs:{href:"#接口作为api"}},[s._v("接口作为API")])])])]),a("p"),s._v(" "),a("p",[s._v("软件工程中有许多情况，对于不同的程序员群体来说，同意一个「契约」来阐明他们的软件如何相互作用是非常重要的。每个组都应该能够编写自己的代码，而不需要知道如何编写其他组的代码。一般来说，"),a("strong",[s._v("接口")]),s._v(" 就是这样的合同。")]),s._v(" "),a("p",[s._v("例如，想象一个未来的社会，在这个社会中，电脑控制的机器人汽车在没有操作人员的情况下通过城市街道运送乘客。汽车制造商编写运行汽车停止的软件（当然是 Java），启动、加速、左转、等等。另一个工业集团，电子制导仪器制造商，使计算机系统接收 GPS（全球定位系统）的位置数据和无线传输的交通状况，并使用该信息来驱动汽车。")]),s._v(" "),a("p",[s._v("汽车制造商必须发布一个行业标准接口，详细说明可以调用什么方法使车辆移动（任何制造商生产的任何汽车）。然后指导制造商可以编写调用接口中描述的方法来指挥汽车的软件。工业组织都不需要知道其他组织的软件是如何实施的。实际上，每个组织都认为它的软件是高度专有的，并且保留随时修改它的权利，只要它继续遵守公布的接口。")]),s._v(" "),a("h2",{attrs:{id:"java-中的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-中的接口"}},[s._v("#")]),s._v(" Java 中的接口")]),s._v(" "),a("p",[s._v("在 Java 编程语言中，一个 "),a("strong",[s._v("接口")]),s._v(" 是一个引用类型，类似于类，它可以只包含常量，方法签名，默认的方法，静态方法和嵌套类型。方法体仅存在于默认方法和静态方法中。接口不能被实例化 - 它们只能由类实现或由其他接口继承。继承将在本课稍后讨论。")]),s._v(" "),a("p",[s._v("定义一个接口类似于创建一个新的类：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OperateCar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量声明，如果有的话")]),s._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 方法签名")]),s._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个枚举值 RIGHT, LEFT")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("turn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Direction")]),s._v(" direction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" radius"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" startSpeed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" endSpeed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("changeLanes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Direction")]),s._v(" direction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" startSpeed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" endSpeed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("signalTurn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Direction")]),s._v(" direction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" signalOn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRadarFront")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" distanceToCar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" speedOfCar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getRadarRear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" distanceToCar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" speedOfCar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 更多的方法签名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("请注意，方法签名没有大括号，并以分号结尾。")]),s._v(" "),a("p",[s._v("要使用接口，您需要编写一个实现接口的类。当一个可实例化的类实现一个接口时，它为接口中声明的每个方法提供一个方法体。例如，")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OperateBMW760i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OperateCar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the OperateCar method signatures, with implementation --")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// for example:")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("signalTurn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Direction")]),s._v(" direction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" signalOn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// code to turn BMW's LEFT turn indicator lights on")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// code to turn BMW's LEFT turn indicator lights off")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// code to turn BMW's RIGHT turn indicator lights on")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// code to turn BMW's RIGHT turn indicator lights off")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// other members, as needed -- for example, helper classes not")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// visible to clients of the interface")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("在上面的机器人汽车示例中，汽车制造商将实现接口。当然，雪佛兰的实施与丰田的实现将大不相同，但两家制造商将坚持相同的接口。作为接口客户的指导制造商将构建使用汽车位置的 GPS 数据，数字街道地图和交通数据来驱动汽车的系统。这样做时，指导系统将调用接口方法：转弯、变道、制动、加速等等。")]),s._v(" "),a("h2",{attrs:{id:"接口作为api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口作为api"}},[s._v("#")]),s._v(" 接口作为API")]),s._v(" "),a("p",[s._v("机器人车的例子显示了一个接口被用作工业标准的应用程序编程接口（API）。API 在商业软件产品中也很常见。通常情况下，一家公司销售一个软件包，其中包含另一家公司想要在自己的软件产品中使用的复杂方法。一个例子就是出售给制造最终用户图形程序的公司的一套数字图像处理方法。图像处理公司编写它的类来实现一个接口，并将其公开给客户。图形公司然后使用接口中定义的签名和返回类型来调用图像处理方法。虽然图像处理公司的 API 是公开的（对其客户），但其 API 的实现仍然是一个严密保密的秘密 - 事实上")])])}),[],!1,null,null,null);t.default=e.exports}}]);